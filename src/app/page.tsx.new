"use client";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { ExpenseChart } from "@/components/expense-chart";
import { useTransactions } from "@/lib/transaction-context";
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table";
import { CategoryPieChart } from "@/components/category-pie-chart";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { useMemo, useState } from "react";
import { DateRangePicker } from "@/components/date-range-picker";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Skeleton } from "@/components/ui/skeleton";
import { 
  ArrowUpCircle, 
  ArrowDownCircle, 
  BarChart3, 
  PieChart, 
  Calendar, 
  DollarSign,
  TrendingUp,
  AlertTriangle,
  Clock
} from "lucide-react";
import { useCurrency } from "@/lib/currency-context";

export default function Home() {
  return <HomeClient />;
}

function HomeClient() {
  const { transactions, budgets, isLoading, error } = useTransactions();
  const { currencySymbol, formatAmount } = useCurrency();
  const [dateRange, setDateRange] = useState<{ from: Date; to: Date } | undefined>(undefined);
  
  // Filter transactions by date range if selected
  const filteredTransactions = useMemo(() => {
    if (!dateRange?.from || !dateRange?.to) return transactions;
    
    return transactions.filter(transaction => {
      const transactionDate = new Date(transaction.date);
      return transactionDate >= dateRange.from && transactionDate <= dateRange.to;
    });
  }, [transactions, dateRange]);
  
  // Calculate total balance, income, and expenses
  const financialSummary = useMemo(() => {
    const totalIncome = filteredTransactions
      .filter((t) => t.type === "income")
      .reduce((sum, t) => sum + t.amount, 0);
      
    const totalExpenses = filteredTransactions
      .filter((t) => t.type === "expense")
      .reduce((sum, t) => sum + t.amount, 0);
      
    const totalBalance = totalIncome - totalExpenses;
    
    // Calculate month-over-month change
    const currentMonth = new Date().getMonth();
    const currentYear = new Date().getFullYear();
    
    const thisMonthTransactions = filteredTransactions.filter(t => {
      const date = new Date(t.date);
      return date.getMonth() === currentMonth && date.getFullYear() === currentYear;
    });
    
    const lastMonthTransactions = filteredTransactions.filter(t => {
      const date = new Date(t.date);
      return (date.getMonth() === currentMonth - 1 || (currentMonth === 0 && date.getMonth() === 11)) && 
             (currentMonth > 0 ? date.getFullYear() === currentYear : date.getFullYear() === currentYear - 1);
    });
    
    const thisMonthIncome = thisMonthTransactions
      .filter(t => t.type === "income")
      .reduce((sum, t) => sum + t.amount, 0);
      
    const thisMonthExpenses = thisMonthTransactions
      .filter(t => t.type === "expense")
      .reduce((sum, t) => sum + t.amount, 0);
      
    const lastMonthIncome = lastMonthTransactions
      .filter(t => t.type === "income")
      .reduce((sum, t) => sum + t.amount, 0);
      
    const lastMonthExpenses = lastMonthTransactions
      .filter(t => t.type === "expense")
      .reduce((sum, t) => sum + t.amount, 0);
    
    // Calculate percentage changes
    const incomeChange = lastMonthIncome === 0 
      ? thisMonthIncome > 0 ? 100 : 0
      : ((thisMonthIncome - lastMonthIncome) / lastMonthIncome) * 100;
      
    const expensesChange = lastMonthExpenses === 0
      ? thisMonthExpenses > 0 ? 100 : 0
      : ((thisMonthExpenses - lastMonthExpenses) / lastMonthExpenses) * 100;
    
    return {
      totalBalance,
      totalIncome,
      totalExpenses,
      thisMonthIncome,
      thisMonthExpenses,
      incomeChange,
      expensesChange
    };
  }, [filteredTransactions]);
  
  // Get recent transactions (last 5)
  const recentTransactions = useMemo(() => {
    return [...filteredTransactions]
      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
      .slice(0, 5);
  }, [filteredTransactions]);

  // Calculate spending insights
  const insights = useMemo(() => {
    // Calculate expenses by category
    const expensesByCategory = filteredTransactions
      .filter(t => t.type === "expense")
      .reduce((acc, transaction) => {
        const { category, amount } = transaction;
        if (!acc[category]) {
          acc[category] = 0;
        }
        acc[category] += amount;
        return acc;
      }, {} as Record<string, number>);

    // Find top spending category
    let topCategory = "";
    let topAmount = 0;
    Object.entries(expensesByCategory).forEach(([category, amount]) => {
      if (amount > topAmount) {
        topCategory = category;
        topAmount = amount;
      }
    });

    // Find categories over budget
    const overBudgetCategories = budgets
      .filter(budget => {
        const actual = expensesByCategory[budget.category] || 0;
        return actual > budget.amount;
      })
      .map(budget => ({
        category: budget.category,
        budget: budget.amount,
        actual: expensesByCategory[budget.category] || 0,
        overspent: (expensesByCategory[budget.category] || 0) - budget.amount,
        percentage: ((expensesByCategory[budget.category] || 0) / budget.amount) * 100
      }));
    
    // Calculate upcoming bills (dummy data for now)
    const upcomingBills = [
      { name: "Rent", amount: 1200, dueDate: new Date(new Date().setDate(new Date().getDate() + 5)) },
      { name: "Electricity", amount: 85, dueDate: new Date(new Date().setDate(new Date().getDate() + 8)) },
      { name: "Internet", amount: 60, dueDate: new Date(new Date().setDate(new Date().getDate() + 12)) }
    ];

    return {
      topCategory,
      topAmount,
      overBudgetCategories,
      upcomingBills
    };
  }, [filteredTransactions, budgets]);

  if (error) {
    return (
      <div className="container py-8">
        <Alert variant="destructive">
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      </div>
    );
  }

  return (
    <div className="container py-4 md:py-8">
      <div className="flex flex-col md:flex-row md:items-center justify-between mb-6 gap-4">
        <h1 className="text-2xl md:text-3xl font-bold">Financial Dashboard</h1>
        <div className="flex flex-col sm:flex-row gap-2 md:gap-4">
          <DateRangePicker 
            value={dateRange}
            onChange={setDateRange}
          />
          <div className="flex gap-2">
            <Button asChild variant="outline" size="sm" className="h-10">
              <Link href="/budgets">
                <DollarSign className="mr-1 h-4 w-4" />
                <span className="hidden sm:inline">Manage Budgets</span>
                <span className="sm:hidden">Budgets</span>
              </Link>
            </Button>
            <Button asChild size="sm" className="h-10">
              <Link href="/transactions/new">
                <ArrowUpCircle className="mr-1 h-4 w-4" />
                <span className="hidden sm:inline">Add Transaction</span>
                <span className="sm:hidden">Add</span>
              </Link>
            </Button>
          </div>
        </div>
      </div>
      
      {isLoading ? (
        <div className="grid gap-4 md:grid-cols-3">
          {[1, 2, 3].map((i) => (
            <Card key={i}>
              <CardHeader className="pb-2">
                <Skeleton className="h-4 w-28" />
              </CardHeader>
              <CardContent>
                <Skeleton className="h-8 w-20" />
              </CardContent>
            </Card>
          ))}
        </div>
      ) : (
        <div className="grid gap-4 md:grid-cols-3">
          <Card>
            <CardHeader className="pb-2 flex flex-row items-center justify-between space-y-0">
              <CardTitle className="text-sm font-medium text-muted-foreground">
                Total Balance
              </CardTitle>
              <DollarSign className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{currencySymbol}{formatAmount(financialSummary.totalBalance)}</div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="pb-2 flex flex-row items-center justify-between space-y-0">
              <CardTitle className="text-sm font-medium text-muted-foreground">
                Income
              </CardTitle>
              <ArrowUpCircle className="h-4 w-4 text-green-500" />
            </CardHeader>
            <CardContent>
              <div className="flex flex-col">
                <div className="text-2xl font-bold text-green-600">{currencySymbol}{formatAmount(financialSummary.totalIncome)}</div>
                <p className="text-xs text-muted-foreground mt-1 flex items-center">
                  <span className={financialSummary.incomeChange >= 0 ? "text-green-500" : "text-red-500"}>
                    {financialSummary.incomeChange >= 0 ? "+" : ""}{financialSummary.incomeChange.toFixed(1)}%
                  </span>
                  <span className="ml-1">vs last month</span>
                </p>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="pb-2 flex flex-row items-center justify-between space-y-0">
              <CardTitle className="text-sm font-medium text-muted-foreground">
                Expenses
              </CardTitle>
              <ArrowDownCircle className="h-4 w-4 text-red-500" />
            </CardHeader>
            <CardContent>
              <div className="flex flex-col">
                <div className="text-2xl font-bold text-red-600">{currencySymbol}{formatAmount(financialSummary.totalExpenses)}</div>
                <p className="text-xs text-muted-foreground mt-1 flex items-center">
                  <span className={financialSummary.expensesChange <= 0 ? "text-green-500" : "text-red-500"}>
                    {financialSummary.expensesChange >= 0 ? "+" : ""}{financialSummary.expensesChange.toFixed(1)}%
                  </span>
                  <span className="ml-1">vs last month</span>
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
      
      <Tabs defaultValue="overview" className="mt-8">
        <TabsList className="grid grid-cols-2 md:grid-cols-4 mb-4">
          <TabsTrigger value="overview" className="flex items-center">
            <BarChart3 className="mr-2 h-4 w-4" />
            <span>Overview</span>
          </TabsTrigger>
          <TabsTrigger value="insights" className="flex items-center">
            <TrendingUp className="mr-2 h-4 w-4" />
            <span>Insights</span>
          </TabsTrigger>
          <TabsTrigger value="transactions" className="flex items-center">
            <Calendar className="mr-2 h-4 w-4" />
            <span>Recent</span>
          </TabsTrigger>
          <TabsTrigger value="upcoming" className="flex items-center">
            <Clock className="mr-2 h-4 w-4" />
            <span>Upcoming</span>
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="overview" className="space-y-6">
          <div className="grid gap-6 md:grid-cols-2">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <BarChart3 className="mr-2 h-5 w-5" />
                  Monthly Expense Trend
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="h-80">
                  {isLoading ? (
                    <div className="flex items-center justify-center h-full">
                      <Skeleton className="h-full w-full" />
                    </div>
                  ) : (
                    <ExpenseChart transactions={filteredTransactions} />
                  )}
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <PieChart className="mr-2 h-5 w-5" />
                  Expense by Category
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="h-80">
                  {isLoading ? (
                    <div className="flex items-center justify-center h-full">
                      <Skeleton className="h-full w-full rounded-full" />
                    </div>
                  ) : (
                    <CategoryPieChart transactions={filteredTransactions} />
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        <TabsContent value="insights">
          <div className="grid gap-6 md:grid-cols-2">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <AlertTriangle className="mr-2 h-5 w-5 text-amber-500" />
                  Budget Alerts
                </CardTitle>
              </CardHeader>
              <CardContent>
                {isLoading ? (
                  <div className="space-y-2">
                    {[1, 2, 3].map(i => (
                      <Skeleton key={i} className="h-20 w-full" />
                    ))}
                  </div>
                ) : insights.overBudgetCategories.length > 0 ? (
                  <div className="space-y-4">
                    {insights.overBudgetCategories.map(item => (
                      <Alert key={item.category} variant="destructive">
                        <AlertTitle className="flex items-center justify-between">
                          <span>Over Budget in {item.category}</span>
                          <span className="text-sm font-normal">{item.percentage.toFixed(0)}% of budget</span>
                        </AlertTitle>
                        <AlertDescription className="mt-2">
                          <div className="flex justify-between text-sm">
                            <span>Budget: {currencySymbol}{formatAmount(item.budget)}</span>
                            <span>Spent: {currencySymbol}{formatAmount(item.actual)}</span>
                          </div>
                          <div className="w-full bg-red-200 rounded-full h-2.5 mt-2">
                            <div 
                              className="bg-red-600 h-2.5 rounded-full" 
                              style={{ width: `${Math.min(item.percentage, 100)}%` }}
                            ></div>
                          </div>
                          <p className="mt-2">
                            You've overspent by {currencySymbol}{formatAmount(item.overspent)}
                          </p>
                        </AlertDescription>
                      </Alert>
                    ))}
                  </div>
                ) : (
                  <div className="flex flex-col items-center justify-center h-[350px] text-center">
                    <div className="rounded-full bg-green-100 p-3 mb-4">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                    </div>
                    <h3 className="text-lg font-medium">You're on track!</h3>
                    <p className="text-sm text-muted-foreground mt-2">
                      All your spending is within budget limits.
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <TrendingUp className="mr-2 h-5 w-5 text-blue-500" />
                  Spending Insights
                </CardTitle>
              </CardHeader>
              <CardContent>
                {isLoading ? (
                  <div className="space-y-2">
                    {[1, 2, 3].map(i => (
                      <Skeleton key={i} className="h-20 w-full" />
                    ))}
                  </div>
                ) : (
                  <div className="space-y-6">
                    {insights.topCategory && (
                      <div className="border rounded-lg p-4">
                        <h3 className="font-medium mb-2">Top Spending Category</h3>
                        <div className="flex items-center justify-between">
                          <span className="text-lg">{insights.topCategory}</span>
                          <span className="text-lg font-bold">{currencySymbol}{formatAmount(insights.topAmount)}</span>
                        </div>
                        <div className="w-full bg-blue-100 rounded-full h-2.5 mt-2">
                          <div 
                            className="bg-blue-600 h-2.5 rounded-full" 
                            style={{ width: '100%' }}
                          ></div>
                        </div>
                      </div>
                    )}
                    
                    <div className="border rounded-lg p-4">
                      <h3 className="font-medium mb-2">Monthly Summary</h3>
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <p className="text-sm text-muted-foreground">Income</p>
                          <p className="text-lg font-medium text-green-600">
                            {currencySymbol}{formatAmount(financialSummary.thisMonthIncome)}
                          </p>
                        </div>
                        <div>
                          <p className="text-sm text-muted-foreground">Expenses</p>
                          <p className="text-lg font-medium text-red-600">
                            {currencySymbol}{formatAmount(financialSummary.thisMonthExpenses)}
                          </p>
                        </div>
                      </div>
                    </div>
                    
                    <div className="border rounded-lg p-4">
                      <h3 className="font-medium mb-2">Savings Rate</h3>
                      <div className="flex items-center justify-between">
                        <span>This month</span>
                        <span className="font-bold">
                          {financialSummary.thisMonthIncome > 0 
                            ? ((financialSummary.thisMonthIncome - financialSummary.thisMonthExpenses) / 
                               financialSummary.thisMonthIncome * 100).toFixed(1)
                            : "0"}%
                        </span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2.5 mt-2">
                        <div 
                          className="bg-green-500 h-2.5 rounded-full" 
                          style={{ 
                            width: `${financialSummary.thisMonthIncome > 0 
                              ? Math.max(0, Math.min(100, ((financialSummary.thisMonthIncome - financialSummary.thisMonthExpenses) / 
                                 financialSummary.thisMonthIncome * 100)))
                              : 0}%` 
                          }}
                        ></div>
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        <TabsContent value="transactions">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Calendar className="mr-2 h-5 w-5" />
                Recent Transactions
              </CardTitle>
            </CardHeader>
            <CardContent>
              {isLoading ? (
                <div className="space-y-2">
                  {[1, 2, 3, 4, 5].map(i => (
                    <Skeleton key={i} className="h-12 w-full" />
                  ))}
                </div>
              ) : recentTransactions.length > 0 ? (
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Date</TableHead>
                        <TableHead>Description</TableHead>
                        <TableHead>Category</TableHead>
                        <TableHead className="text-right">Amount</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {recentTransactions.map((transaction) => (
                        <TableRow key={transaction.id}>
                          <TableCell>{transaction.date}</TableCell>
                          <TableCell>{transaction.description}</TableCell>
                          <TableCell>
                            <span className="inline-block px-2 py-1 rounded-full text-xs font-medium bg-gray-100">
                              {transaction.category}
                            </span>
                          </TableCell>
                          <TableCell className="text-right">
                            <span
                              className={
                                transaction.type === "income"
                                  ? "text-green-600"
                                  : "text-red-600"
                              }
                            >
                              {transaction.type === "income" ? "+" : "-"}{currencySymbol}
                              {formatAmount(transaction.amount)}
                            </span>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              ) : (
                <div className="py-8 text-center text-muted-foreground">
                  No transactions found. Add your first transaction to get started.
                </div>
              )}
              <div className="mt-4 flex justify-end">
                <Button variant="outline" asChild>
                  <Link href="/transactions">View All Transactions</Link>
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="upcoming">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Clock className="mr-2 h-5 w-5" />
                Upcoming Bills
              </CardTitle>
            </CardHeader>
            <CardContent>
              {isLoading ? (
                <div className="space-y-2">
                  {[1, 2, 3].map(i => (
                    <Skeleton key={i} className="h-16 w-full" />
                  ))}
                </div>
              ) : insights.upcomingBills.length > 0 ? (
                <div className="space-y-4">
                  {insights.upcomingBills.map((bill, index) => (
                    <div key={index} className="flex items-center justify-between p-4 border rounded-lg">
                      <div>
                        <h3 className="font-medium">{bill.name}</h3>
                        <p className="text-sm text-muted-foreground">
                          Due in {Math.ceil((bill.dueDate.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))} days
                        </p>
                      </div>
                      <div className="text-right">
                        <p className="font-bold">{currencySymbol}{formatAmount(bill.amount)}</p>
                        <p className="text-xs text-muted-foreground">
                          {bill.dueDate.toLocaleDateString()}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="py-8 text-center text-muted-foreground">
                  No upcoming bills found.
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
} 